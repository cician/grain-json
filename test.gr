import Json from "json"
import Result from "result"
import Exception from "runtime/exception"

let testPrint = (result: Result<String,Exception>) => {
	match (result) {
		Ok(s) => print(s),
		Err(e) => Exception.printException(e)
	}
}

let printSomething = () => {
	print("simple object: ")
	testPrint(Json.toStringPretty(Json.JSONObject([("hello", Json.JSONString("world!"))])))

	let test = Json.JSONArray([
		Json.JSONNull,
		Json.JSONBoolean(true),
		Json.JSONBoolean(false),
		Json.JSONNumber(2),
		Json.JSONNumber(-2),
		Json.JSONNumber(-0),
		// Numbers with large exponents not yet handled in parsing.
		// Json.JSONNumber(1E200),
		// Json.JSONNumber(1E-200),
		Json.JSONNumber(1E2),
		Json.JSONNumber(1E-2),
		Json.JSONNumber(1/2),
		Json.JSONString("ü§òüèª üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø Hello\n\"wo</ \u007F \u0080 rld\"! ü§òüèª"),
		Json.JSONArray([]),
		Json.JSONArray([Json.JSONNull]),
		Json.JSONArray([
			Json.JSONNumber(1),
			Json.JSONNumber(2),
			Json.JSONNumber(3)
		]),
		Json.JSONObject([
			("pinco", Json.JSONString("pallino")),
			("pippo", Json.JSONNumber(4543))
		]),
		Json.JSONObject([
			("just", Json.JSONString("one"))
		]),
		Json.JSONObject([])
	])

	print("ugly:")
	testPrint(Json.toStringCompact(test))
	print("")
	print("pretty:")
	testPrint(Json.toStringPretty(test))
	print("")
	print("prettier:")
	// Compiler for some reason says the fields of FormattingSettings are not public.
	// See https://github.com/grain-lang/grain/issues/190#issuecomment-851015909
	testPrint(Json.toString(test, {
		indentation: Json.IndentWithTab,
		arrayFormat: Json.OneArrayEntryPerLine,
		objectFormat: Json.OneObjectEntryPerLine,
		lineEnding: Json.LineFeed,
		finishWithNewLine: true,
		escapeAllControlPoints: true,
		escapeHTMLUnsafeSequences: true,
		escapeNonASCII: true
	} : Json.FormattingSettings))

	print("")

	// There's currently a github issue for these https://github.com/grain-lang/grain/issues/693
	let infinity = 1.0 / 0.0
	let nan = 0.0 / 0.0
	let negativeinfinity = -1.0 / 0.0

	print("not allowed:")
	testPrint(Json.toStringCompact(Json.JSONNumber(infinity)))
	testPrint(Json.toStringCompact(Json.JSONNumber(negativeinfinity)))
	testPrint(Json.toStringCompact(Json.JSONNumber(nan)))

	print("")
	print("parsing:")
	print(Json.parse("null"))
	print(Json.parse("\tnull \r\n"))
	print(Json.parse("true"))
	print(Json.parse("false"))
	print(Json.parse("-10"))
	print(Json.parse("-2"))
	print(Json.parse("-1"))
	print(Json.parse("1"))
	print(Json.parse("2"))
	print(Json.parse("10"))
	print(Json.parse("100"))
	print(Json.parse("1000"))
	print(Json.parse("0.1"))
	print(Json.parse("0.123"))
	print(Json.parse("0.9"))
	
	print(Json.parse("1.123"))
	print(Json.parse("0e0")) // 0
	print(Json.parse("1e0")) // 1
	print(Json.parse("1e1")) // 10
	print(Json.parse("1e2")) // 100
	print(Json.parse("1e3")) // 1000
	print(Json.parse("-1e2")) // -100
	print(Json.parse("1e-1")) // 0.1
	print(Json.parse("1.23e-4")) // 
	print(Json.parse("01")) // this should fail
	print(Json.parse(".1")) // this should fail
	print(Json.parse("\"Hello world!\""))
	print(Json.parse("\"A \\\"quoted\\\" string\""))
	print(Json.parse("{}"))
	print(Json.parse("{ \"Hello\" : \"World!\" }"))
	print(Json.parse("{\"a\":\"A\",\"b\":\"B\"}"))
	print(Json.parse("{ \"a\" : \"A\", \"b\" : \"B\" }"))
	print(Json.parse("{ \"a\" : { \"0\": false, \"1\":true }, \"b\" : [\"A\",\"B\",\"C\"] }"))
	print(Json.parse("{\"n\": [1,2,\"3\",false,null]}"))
	print(Json.parse("[]"))
	print(Json.parse("[true,false,null]"))
	print(Json.parse("{}error"))
	print(Json.parse("[true,false,null,\"hello\",[true]]"))

	print(Json.parse("\"ÊÄÄ\""))
	print(Json.parse("\"\u005Cu6000\""))
	testPrint(Json.toStringPretty(Json.JSONString("\u1770")))

	print("\u6000")
	

	print(Json.parse("\"\u005Cu6000 \u005Cud800\u005Cudc82 \u005Cud83e\u005Cudd18\u005Cud83c\u005Cudffb \u005Cud83c\u005Cudff4\u005Cudb40\u005Cudc67\u005Cudb40\u005Cudc62\u005Cudb40\u005Cudc77\u005Cudb40\u005Cudc6c\u005Cudb40\u005Cudc73\u005Cudb40\u005Cudc7f\"")) // ÊÄÄ êÇÇ ü§òüèª üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø

	
	

	match (Json.parse("\"ÊÄÄ êÇÇ ü§òüèª üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø\"")) {
	// match (Json.parse("\"\u005Cud800\"")) {
		Ok(json) => {
			print(json)
			testPrint(Json.toString(
				json,
				{
					indentation: Json.IndentWithTab,
					arrayFormat: Json.OneArrayEntryPerLine,
					objectFormat: Json.OneObjectEntryPerLine,
					lineEnding: Json.LineFeed,
					finishWithNewLine: true,
					escapeAllControlPoints: true,
					escapeHTMLUnsafeSequences: true,
					escapeNonASCII: true
				} : Json.FormattingSettings)
			)
		},
		Err(e) => Exception.printException(e)
	}
	void

	print("round trip:")
	testPrint(Json.toStringCompact(test))
	print(Result.map(Json.parse, Json.toStringCompact(test)))
}

printSomething();
