import * from "./json"

// Parsing

// Simple values of each type
assert parse("null") == Ok(JSONNull)
assert parse("true") == Ok(JSONBoolean(true))
assert parse("false") == Ok(JSONBoolean(false))
assert parse("\"\"") == Ok(JSONString(""))
assert parse("0") == Ok(JSONNumber(0))
assert parse("[]") == Ok(JSONArray([]))
assert parse("{}") == Ok(JSONObject([]))

// Various strings. Escapes, emojis etc.
assert parse("\"ASCII Hello world!\"") == Ok(JSONString("ASCII Hello world!"))

assert parse("\"Unicode こんにちは世界!\"") ==
Ok(JSONString("Unicode こんにちは世界!"))
assert parse("\"A \\\"quoted\\\" string\"") ==
Ok(JSONString("A \"quoted\" string"))
assert parse("\"🤘🏻\"") == Ok(JSONString("🤘🏻"))
assert parse("\"🤘🏻\"") == Ok(JSONString("🤘🏻"))
assert parse("\"🏴󠁧󠁢󠁷󠁬󠁳󠁿\"") ==
Ok(JSONString("🏴󠁧󠁢󠁷󠁬󠁳󠁿"))

// Different number types and values
assert parse("-10") == Ok(JSONNumber(-10))
assert parse("-2") == Ok(JSONNumber(-2))
assert parse("-1") == Ok(JSONNumber(-1))
assert parse("1") == Ok(JSONNumber(1))
assert parse("2") == Ok(JSONNumber(2))
assert parse("10") == Ok(JSONNumber(10))
assert parse("100") == Ok(JSONNumber(100))
assert parse("1000") == Ok(JSONNumber(1000))
assert parse("0.0") == Ok(JSONNumber(0.0))
assert parse("0.1") == Ok(JSONNumber(0.1))
assert parse("0.123") == Ok(JSONNumber(0.123))
assert parse("0.9") == Ok(JSONNumber(0.9))
assert parse("1.123") == Ok(JSONNumber(1.123))
assert parse("0e0") == Ok(JSONNumber(0.0))
assert parse("1e0") == Ok(JSONNumber(1.0))
assert parse("1e1") == Ok(JSONNumber(10.0))
assert parse("1E1") == Ok(JSONNumber(10.0))
assert parse("1e2") == Ok(JSONNumber(100.0))
assert parse("1e3") == Ok(JSONNumber(1000.0))
assert parse("-1e2") == Ok(JSONNumber(-100.0))
assert parse("1e-1") == Ok(JSONNumber(0.1))
assert parse("1.23e-4") == Ok(JSONNumber(0.000123))

// FIXME
// "-0" currently parses to 0, but should it?
// assert parse("-0") == Ok(JSONNumber(?))
// Note that in Grain these are true:
// assert 0 == 0
// assert 0.0 == -0.0
// assert 0 == -0.0
// And printing constant "-0" results in "0"

// Big numbers
assert parse("1152921504606846976") == Ok(JSONNumber(1152921504606846976))

// TODO Bigger numbers.
// Numbers with large exponents not yet handled in parsing. Waiting for arbitrary precision number support in Grain.
//assert parse("1E200") == Ok(JSONNumber(1E200))
//assert parse("1E-200") == Ok(JSONNumber(1E-200))

// Complex objects and arrays.

assert parse("{ \"Hello\" : \"World!\" }") ==
Ok(JSONObject([("Hello", JSONString("World!"))]))

assert parse("{\"a\":\"A\",\"b\":\"B\"}") ==
Ok(JSONObject([("a", JSONString("A")), ("b", JSONString("B"))]))

assert parse(
  "{ \"a\" : { \"0\": false, \"1\":true }, \"b\" : [\"A\",\"B\",\"C\"] }",
) ==
Ok(
  JSONObject(
    [
      ("a", JSONObject([("0", JSONBoolean(false)), ("1", JSONBoolean(true))])),
      ("b", JSONArray([JSONString("A"), JSONString("B"), JSONString("C")])),
    ],
  ),
)

assert parse("[1,\"2\",true,false,null]") ==
Ok(
  JSONArray(
    [
      JSONNumber(1),
      JSONString("2"),
      JSONBoolean(true),
      JSONBoolean(false),
      JSONNull,
    ],
  ),
)

assert parse("[[[[[[[[[[]]]]]]]]]]") ==
Ok(
  JSONArray(
    [
      JSONArray(
        [
          JSONArray(
            [
              JSONArray(
                [
                  JSONArray(
                    [
                      JSONArray(
                        [JSONArray([JSONArray([JSONArray([JSONArray([])])])])],
                      ),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
      ),
    ],
  ),
)

assert parse(
  "{\"1\":{\"2\":{\"3\":{\"4\":{\"5\":{\"6\":{\"7\":{\"8\":{\"9\":{\"10\":{}}}}}}}}}}}",
) ==
Ok(
  JSONObject(
    [
      ("1", JSONObject(
        [
          ("2", JSONObject(
            [
              ("3", JSONObject(
                [
                  ("4", JSONObject(
                    [
                      ("5", JSONObject(
                        [
                          ("6", JSONObject(
                            [
                              ("7", JSONObject(
                                [
                                  ("8", JSONObject(
                                    [
                                      ("9", JSONObject(
                                        [("10", JSONObject([]))],
                                      )),
                                    ],
                                  )),
                                ],
                              )),
                            ],
                          )),
                        ],
                      )),
                    ],
                  )),
                ],
              )),
            ],
          )),
        ],
      )),
    ],
  ),
)

assert parse("[1,2,3]") ==
Ok(JSONArray([JSONNumber(1), JSONNumber(2), JSONNumber(3)]))
assert parse("[\"a\",\"b\",\"c\"]") ==
Ok(JSONArray([JSONString("a"), JSONString("b"), JSONString("c")]))

// White spaces
assert parse("\tnull \r\n") == Ok(JSONNull)
assert parse("  {\r}") == Ok(JSONObject([]))
assert parse("[1,\n2\n,3\n]\n") ==
Ok(JSONArray([JSONNumber(1), JSONNumber(2), JSONNumber(3)]))
assert parse("{ \"a\" :  \"A\" ,  \"b\" : \"B\" }") ==
Ok(JSONObject([("a", JSONString("A")), ("b", JSONString("B"))]))

// Invalid inputs

// JSON numbers should start with a non zero digit or minus sign.
assert match (parse("01")) {
  Err(UnexpectedToken(_)) => true,
  _ => false,
}

assert match (parse(".1")) {
  Err(UnexpectedToken(_)) => true,
  _ => false,
}

assert match (parse("{}error")) {
  Err(UnexpectedToken(_)) => true,
  _ => false,
}

assert match (parse("[]error")) {
  Err(UnexpectedToken(_)) => true,
  _ => false,
}

assert match (parse("]")) {
  Err(UnexpectedToken(_)) => true,
  _ => false,
}

assert match (parse("}")) {
  Err(UnexpectedToken(_)) => true,
  _ => false,
}

assert match (parse("{")) {
  Err(UnexpectedEndOfInput(_)) => true,
  _ => false,
}

assert match (parse("\"k\":\"v\"")) {
  Err(UnexpectedToken(_)) => true,
  _ => false,
}

assert match (parse("[")) {
  Err(UnexpectedEndOfInput(_)) => true,
  _ => false,
}

assert match (parse("{\"k")) {
  Err(UnexpectedEndOfInput(_)) => true,
  _ => false,
}

assert match (parse("{\"k\"")) {
  Err(UnexpectedEndOfInput(_)) => true,
  _ => false,
}

assert match (parse("{\"k\":")) {
  Err(UnexpectedEndOfInput(_)) => true,
  _ => false,
}

assert match (parse("{\"k\":\"v")) {
  Err(UnexpectedEndOfInput(_)) => true,
  _ => false,
}

assert match (parse("{\"k\":\"v\"")) {
  Err(UnexpectedEndOfInput(_)) => true,
  _ => false,
}

// Emitting

// TODO Simple values of each type

// TODO Invalid numbers

// TODO round trips
